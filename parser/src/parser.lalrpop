// vim: ft=rust
use core::{RpNumber, Loc, RpModifier, RpPackage, Object, VersionReq};
use std::path::PathBuf;
use std::rc::Rc;
use super::ast::*;
use super::token::{self, Token};
use super::utils::*;

grammar<'input, 'object>(input_object: &'object Rc<Box<Object>>);

pub File: File<'input> = {
    <uses:Loc<Use>*>
    <options:Loc<OptionDecl>*>
    <decls:Loc<Decl>*> => File {
        options: options,
        uses: uses,
        decls: decls,
    },
};

Use: UseDecl<'input> =
    "use" <package:Loc<Package>>
        <version_req:("@" Loc<VersionReq>)?>
        <alias:Loc<UseAlias>?>
    ";" =>
{
    UseDecl {
        package: package,
        version_req: version_req.map(|v| v.1),
        alias: alias,
    }
};

UseAlias: &'input str = "as" <value:Identifier> => value;

Package: RpPackage =
    <parts:OneOrMore<".", Identifier>> =>
{
    RpPackage::new(parts.into_iter().map(ToOwned::to_owned).collect())
};

Decl: Decl<'input> = {
    <en:Enum> => Decl::Enum(en),
    <interface:Interface> => Decl::Interface(interface),
    <ty:Type> => Decl::Type(ty),
    <tuple:Tuple> => Decl::Tuple(tuple),
    <service:Service> => Decl::Service(service),
};

Enum: Loc<EnumBody<'input>> =
    <comment:"///"?>
    <s:@L>
    "enum" <name:TypeIdentifier> <ty:(":" Loc<TypeSpec>)?> "{"
        <variants:EnumVariant*>
        <members:Member*>
    "}"
    <e:@R> =>
{
    Loc::new(EnumBody {
        name: name,
        comment: comment.unwrap_or_else(Vec::new),
        ty: ty.map(|ty| ty.1),
        variants: variants,
        members: members,
    }, (input_object.clone(), s, e))
};

Interface: Loc<InterfaceBody<'input>> =
    <comment:"///"?>
    <s:@L>
    "interface" <name:TypeIdentifier> "{"
      <members:Member*>
      <sub_types:Loc<SubType>*>
    "}"
    <e:@R> =>
{
    Loc::new(InterfaceBody {
        name: name,
        comment: comment.unwrap_or_else(Vec::new),
        members: members,
        sub_types: sub_types,
    }, (input_object.clone(), s, e))
};

Type: Loc<TypeBody<'input>> =
    <comment:"///"?>
    <s:@L>
    "type" <name:TypeIdentifier> "{"
        <members:Member*>
    "}"
    <e:@R> =>
{
    Loc::new(TypeBody {
        name: name,
        comment: comment.unwrap_or_else(Vec::new),
        members: members,
    }, (input_object.clone(), s, e))
};

Tuple: Loc<TupleBody<'input>> =
    <comment:"///"?>
    <s:@L>
    "tuple" <name:TypeIdentifier> "{"
        <members:Member*>
    "}"
    <e:@R> =>
{
    Loc::new(TupleBody {
        name: name,
        comment: comment.unwrap_or_else(Vec::new),
        members: members,
    }, (input_object.clone(), s, e))
};

Service: Loc<ServiceBody<'input>> =
    <comment:"///"?>
    <s:@L>
    "service" <name:TypeIdentifier> "{"
        <endpoints:ServiceEndpoint*>
    "}"
    <e:@R> =>
{
    Loc::new(ServiceBody {
        name: name,
        comment: comment.unwrap_or_else(Vec::new),
        endpoints: endpoints,
    }, (input_object.clone(), s, e))
};

ServiceEndpoint: ServiceEndpoint<'input> = {
    <comment:"///"?>
    <head:ServiceEndpointHead> ";"
    => {
        let (id, alias, request, response) = head;

        ServiceEndpoint {
            id: id,
            comment: comment.unwrap_or_else(Vec::new),
            alias: alias,
            options: vec![],
            request: request,
            response: response,
        }
    },

    <comment:"///"?>
    <head:ServiceEndpointHead> "{"
        <options:Loc<OptionDecl>*>
    "}" => {
        let (id, alias, request, response) = head;

        ServiceEndpoint {
            id: id,
            comment: comment.unwrap_or_else(Vec::new),
            alias: alias,
            options: options,
            request: request,
            response: response,
        }
    },
};

ServiceEndpointHead: (Loc<&'input str>, Option<String>, Option<Channel>, Option<Channel>) = {
    <id:Loc<Identifier>> "(" <request:Channel?> ")"
    <response:("->" Channel)?>
    <alias:FieldAlias?>
    => (id, alias, request, response.map(|r| r.1)),
};

Channel: Channel = {
    <stream:"stream"?> <ty:Loc<TypeSpec>> => {
        if stream.is_some() {
            Channel::Streaming {
                ty: ty
            }
        } else {
            Channel::Unary {
                ty: ty
            }
        }
    }
};

FieldAlias: String = {
    "as" <value:Identifier> => value.to_owned(),
    "as" <value:string> => value,
};

PathSpec: PathSpec<'input> = {
    // escape needed to capture variables
    "`" <segments:OneOrMore<"/", PathSegment>> "`" =>
    {
        PathSpec {
            segments: segments,
        }
    },

    // if spec is string, use as a single, literal segment
    <value:Loc<string>> =>
    {
        PathSpec {
            segments: vec![PathSegment::Literal { value: value }],
        }
    },
};

PathSegment: PathSegment<'input> = {
    "{" <name:Loc<Identifier>> ":" <ty:Loc<TypeSpec>> "}" =>
    {
        PathSegment::Variable { name: name, ty: ty }
    },

    <value:Loc<path_segment>> =>
    {
        PathSegment::Literal { value: value }
    },
};

EnumVariant: Loc<EnumVariant<'input>> =
    <comment:"///"?>
    <s:@L>
    <name:Loc<TypeIdentifier>> <argument:("=" Loc<Value>)?> ";"
    <e:@R> =>
{
    Loc::new(EnumVariant {
        name: name,
        comment: comment.unwrap_or_else(Vec::new),
        argument: argument.map(|a| a.1),
    }, (input_object.clone(), s, e))
};

Modifier: RpModifier =
    <modifier:"?"?> =>
{
    modifier.map(|_| RpModifier::Optional).unwrap_or(RpModifier::Required)
};

pub Member: Loc<Member<'input>> = {
    <comment:"///"?>
    <s:@L>
    <name:Identifier> <modifier:Modifier> ":" <ty:TypeSpec> <alias:FieldAlias?> ";"
    <e:@R> =>
    {
        let field = Field {
            modifier: modifier,
            name: name,
            comment: comment.unwrap_or_else(Vec::new),
            ty: ty,
            field_as: alias,
        };

        let member = Member::Field(field);
        Loc::new(member, (input_object.clone(), s, e))
    },

    <s:@L>
    <option:OptionDecl>
    <e:@R> =>
    {
        let member = Member::Option(option);
        Loc::new(member, (input_object.clone(), s, e))
    },

    <s:@L>
    <context:Identifier> "{{" <content:code> "}}"
    <e:@R> =>
    {
        let content = strip_code_block(content);
        let member = Member::Code(context, content);
        Loc::new(member, (input_object.clone(), s, e))
    },

    <s:@L>
    <decl:Decl>
    <e:@R> =>
    {
        let member = Member::InnerDecl(decl);
        Loc::new(member, (input_object.clone(), s, e))
    },
};

OptionDecl: OptionDecl<'input> =
    <name:Identifier> <value:Loc<Value>> ";" =>
{
    OptionDecl {
        name: name,
        value: value,
    }
};

SubType: SubType<'input> =
    <comment:"///"?>
    <name:TypeIdentifier> "{"
        <members:Member*>
    "}" =>
{
    SubType {
        name: name,
        comment: comment.unwrap_or_else(Vec::new),
        members: members,
    }
};

pub Value: Value<'input> = {
    "[" <values:ZeroOrMore<",", Loc<Value>>> "]" => Value::Array(values),
    <string:string> => Value::String(string),
    <number:Number> => Value::Number(number),
    <true> => Value::Boolean(true),
    <false> => Value::Boolean(false),
    <identifier:Identifier> => Value::Identifier(identifier),
};

pub TypeSpec: Type = {
    "any" => Type::Any,
    "float" => Type::Float,
    "double" => Type::Double,
    "signed" <size:TypeBits?> => Type::Signed {
        size: size
    },
    "unsigned" <size:TypeBits?> => Type::Unsigned {
        size: size
    },
    "boolean" => Type::Boolean,
    "string" => Type::String,
    "datetime" => Type::DateTime,
    "bytes" => Type::Bytes,
    <name:Name> => Type::Name{
        name: name
    },
    "[" <inner:TypeSpec> "]" => Type::Array {
        inner: Box::new(inner)
    },
    "{" <key:TypeSpec> ":" <value:TypeSpec> "}" => Type::Map{
        key: Box::new(key),
        value: Box::new(value)
    },
};

Name: Name = {
    <prefix:(Identifier "::")?> <parts:OneOrMore<"::", TypeIdentifier>> => Name::Absolute {
        prefix: prefix.map(|p| p.0.to_owned()),
        parts: parts.into_iter().map(ToOwned::to_owned).collect(),
    },

    "::" <parts:OneOrMore<"::", TypeIdentifier>> => Name::Relative {
        parts: parts.into_iter().map(ToOwned::to_owned).collect(),
    },
};

TypeBits: usize = "/" <number:Number> => number.to_usize().unwrap_or(0usize);

/// Zero or more matching, separated by a token.
ZeroOrMore<Sep, T>: Vec<T> = {
    <value:OneOrMore<Sep, T>?> => {
        value.unwrap_or_else(|| vec![])
    }
};

/// One or more matching, separated by a token.
OneOrMore<Sep, T>: Vec<T> = {
     <values:(<T> Sep)*> <last:T> => {
        let mut values = values;
        values.push(last);
        values
    }
};

Loc<Inner>: Loc<Inner> = <s:@L> <inner:Inner> <e:@R> => {
    Loc::new(inner, (input_object.clone(), s, e))
};

extern {
    type Location = usize;
    type Error = token::Error;

    enum Token<'input> {
        TypeIdentifier => Token::TypeIdentifier(<&'input str>),
        Identifier => Token::Identifier(<&'input str>),
        Number => Token::Number(<RpNumber>),
        VersionReq => Token::VersionReq(<VersionReq>),
        "use" => Token::UseKeyword,
        "as" => Token::AsKeyword,
        "enum" => Token::EnumKeyword,
        "type" => Token::TypeKeyword,
        "interface" => Token::InterfaceKeyword,
        "tuple" => Token::TupleKeyword,
        "service" => Token::ServiceKeyword,
        "(" => Token::LeftParen,
        ")" => Token::RightParen,
        "{" => Token::LeftCurly,
        "}" => Token::RightCurly,
        "{{" => Token::CodeOpen,
        "}}" => Token::CodeClose,
        code => Token::CodeContent(<&'input str>),
        string => Token::String(<String>),
        path_segment => Token::PathSegment(<String>),
        "[" => Token::LeftBracket,
        "]" => Token::RightBracket,
        ";" => Token::SemiColon,
        ":" => Token::Colon,
        "?" => Token::QuestionMark,
        "/" => Token::Slash,
        "=" => Token::Equals,
        "->" => Token::RightArrow,
        "," => Token::Comma,
        "." => Token::Dot,
        "::" => Token::Scope,
        "any" => Token::AnyKeyword,
        "float" => Token::FloatKeyword,
        "double" => Token::DoubleKeyword,
        "signed" => Token::SignedKeyword,
        "unsigned" => Token::UnsignedKeyword,
        "boolean" => Token::BooleanKeyword,
        "string" => Token::StringKeyword,
        "datetime" => Token::DateTimeKeyword,
        "bytes" => Token::BytesKeyword,
        true => Token::TrueKeyword,
        false => Token::FalseKeyword,
        "stream" => Token::StreamKeyword,
        "*" => Token::Star,
        "@" => Token::At,
        "`" => Token::Tick,
        "///" => Token::DocComment(<Vec<&'input str>>),
    }
}
