# vim: filetype=make

M := $(notdir $(CURDIR))
M := $(M:test-%=%)

MKDIR ?= mkdir
RM ?= rm
CP ?= cp
DIFF ?= diff
EXCLUDE ?=
INCLUDE ?= %

ifeq ($(ROOT),)
$(error "ROOT: missing variable")
endif

ifeq ($(REPROTO),)
$(error "REPROTO: missing variable")
endif

ifeq ($(PROJECTS),)
$(error "PROJECTS: missing variable")
endif

ifeq ($(M),)
$(error "M: missing variable")
endif

# which files should trigger rebuilds
deps-any := Makefile
deps-python := script.py
deps-python3 := script.py
deps-rust := Cargo.toml src/lib.rs src/main.rs
deps-js := src/script.js
deps-java := pom.xml src/main/java/Test.java

expected := expected
output := output
workdir := workdir
input := input
targets := test
workdir-source := $(ROOT)/it/workdir

python-args :=
python3-args :=
java-args := -m builder
js-args :=
rust-args :=
doc-args :=

suites := python python3 java js rust doc
paths := proto
exclude-projects :=
exclude-suites :=

-include $(or $(target-file),Makefile)

suites := $(filter $(INCLUDE), $(filter-out $(EXCLUDE) $(exclude-suites), $(suites)))
projects := $(filter $(INCLUDE), $(filter-out $(EXCLUDE) $(exclude-projects), $(PROJECTS)))

compile-args := --no-repository $(paths:%=--path %) $(targets:%=--package %)

# how to build suites
java-suite := build --lang java $(compile-args) $(java-args)
js-suite := build --lang js $(compile-args) $(js-args)
python-suite := build --lang python $(compile-args) $(python-args)
python3-suite := build --lang python $(compile-args) $(python3-args)
rust-suite := build --lang rust $(compile-args) $(rust-args)
doc-suite := doc $(compile-args) --skip-static $(doc-args)

# how to build projects
java-project := build --lang java $(compile-args) $(java-args) -o $(workdir)/java/target/generated-sources/reproto
js-project := build --lang js $(compile-args) $(js-args) -o $(workdir)/js/generated
python-project := build --lang python $(compile-args) $(python-args) -o $(workdir)/python/generated
python3-project := build --lang python $(compile-args) $(python3-args) -o $(workdir)/python3/generated
rust-project := build --lang rust $(compile-args) $(rust-args) -o $(workdir)/rust/src --package-prefix generated

# base command invocations
reproto-cmd := $(REPROTO) $(REPROTO_FLAGS)

input-files = $(notdir $(wildcard $(input)/*.json))
diff-dirs = $(DIFF) -ur $(1) $(2)

define \n


endef

define sync-dirs
	@echo "$$(M): sync: $(1) -> $(2)"
	$(RM) -rf $(2)
	[ -d $(1) ] && $(CP) -ra $(1) $(2) || true
endef

define suite-targets
suite-build += suite-build/$(1)
suite-update += suite-update/$(1)
suite-diff += suite-diff/$(1)

suite-build/$(1): $$(REPROTO)
	@echo "$$(M): Suite: $(1)"
	$$(RM) -rf $$(output)/suite/$(1)
	$$(reproto-cmd) $$($(1)-suite) -o $$(output)/suite/$(1)

suite-update/$(1): suite-build/$(1) $$(expected)/suite/$(1)
	@echo "$$(M): Updating Suite: $(1)"
	$(call sync-dirs,$$(output)/suite/$(1),$$(expected)/suite/$(1))

suite-diff/$(1): suite-build/$(1) $$(expected)/suite/$(1)
	@echo "$$(M): Verifying Diff: $(1)"
	$(call diff-dirs,$$(expected)/suite/$(1),$$(output)/suite/$(1))

$$(expected)/suite/$(1):
	$$(MKDIR) -p $$@
endef

define project-run-target
project-run += $$(output)/project/$(1)/$(2)
project-run-$(1) += $$(output)/project/$(1)/$(2)

$$(output)/project/$(1)/$(2): $$(workdir)/$(1)/script.sh $$(output)/project/$(1)
	@echo "$$(M): Running Project: $(1) (against $$(input)/$(2))"
	grep -v '^#' $$(input)/$(2) | $$< > $$@
endef

define project-targets
project-workdir += $$(workdir)/$(1)
project-script += $$(workdir)/$(1)/script.sh
project-update += project-update/$(1)
project-diff += project-diff/$(1)

deps-$(1) := $$(deps-any) $$(deps-$(1))
deps-$(1) := $$(deps-$(1):%=$$(workdir-source)/$(1)/%)

$$(workdir)/$(1)/script.sh: $$(deps-$(1))
	@echo "$$(M): Building Project: $(1)"
	$$(MKDIR) -p $$(workdir)/$(1)
	$(call sync-dirs,$$(workdir-source)/$(1),$$(workdir)/$(1))
	$$(reproto-cmd) $$($(1)-project)
	$$(MAKE) -C $$(workdir)/$(1)

$(foreach i,$(input-files),\
	$(call project-run-target,$(1),$(i)) $(\n))

project-update/$(1): $$(project-run-$(1)) $$(expected)/project/$(1)
	@echo "$$(M): Updating Project: $(1)"
	$(call sync-dirs,$$(output)/project/$(1),$$(expected)/project/$(1))

project-diff/$(1): $$(project-run-$(1)) $$(expected)/project/$(1) $$(output)/project/$(1)
	@echo "$$(M): Diffing Project: $(1)"
	$(call diff-dirs,$$(expected)/project/$(1),$$(output)/project/$(1))

$$(output)/project/$(1):
	$$(MKDIR) -p $$@

$$(expected)/project/$(1):
	$$(MKDIR) -p $$@
endef

.DEFAULT: all

all: suites projects

clean: clean-projects clean-suites

update: update-suites update-projects

# build generated targets and populate variables
$(eval \
	$(foreach s,$(suites), \
		$(call suite-targets,$(s)) $(\n)) \
	$(foreach p,$(projects), \
		$(call project-targets,$(p)) $(\n)))

suites: $(suite-diff)

clean-suites:
	$(RM) -rf $(output)/suite

update-suites: $(suite-update)

projects: $(project-diff)

clean-projects:
	$(RM) -rf $(workdir)
	$(RM) -rf $(output)/project

update-projects: $(project-update)

$(workdir) $(input):
	$(MKDIR) -p $@

# treating script as phony will cause them to rebuilt
ifeq ($(REBUILD),yes)
.PHONY: $(project-script)
endif

.PHONY: all clean update
.PHONY: suites clean-suites update-suites
.PHONY: $(suite-build) $(suite-update) $(suite-diff)
.PHONY: projects clean-projects update-projects
.PHONY: $(project-run) $(project-update) $(project-diff)
